generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(cuid())
  name             String?
  username         String?    @unique
  email            String     @unique
  emailVerified    DateTime?
  image            String?
  bio              String?
  profession       String?
  education        String?
  missionstatement String?
  twitterUrl       String?
  githubUrl        String?
  instagramUrl     String?
  linkedinUrl      String?
  upiId            String?
  upiName          String?
  upiVerified      Boolean    @default(false)
  accounts         Account[]
  blogs            Blog[]
  blogLikes        BlogLike[]
  comments         Comment[]
  sessions         Session[]
  tipsGiven        Tip[]      @relation("TipsGiven")
  tipsReceived     Tip[]      @relation("TipsReceived")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Blog {
  id         String     @id @default(cuid())
  title      String
  content    String
  authorId   String
  coverimage String?

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes      BlogLike[]
  comments   Comment[]
}

model BlogLike {
  id     String @id @default(cuid())
  userId String
  blogId String
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
}

model Tip {
  id         String   @id @default(cuid())
  amount     Float
  message    String?
  createdAt  DateTime @default(now())
  fromUserId String
  toUserId   String
  fromUser   User     @relation("TipsGiven", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser     User     @relation("TipsReceived", fields: [toUserId], references: [id], onDelete: Cascade)
}
