generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or your current DB
  url      = env("DATABASE_URL")
}

// ----------------------
// User Model
// ----------------------
model User {
  id               String     @id @default(cuid())
  name             String?
  username         String    @unique
  email            String     @unique
  emailVerified    DateTime?
  image            String?
  
  // Custom profile fields
  bio              String?
  profession       String?
  education        String?
  missionstatement String?
  twitterUrl       String?    

  // NextAuth relations
  accounts         Account[]
  sessions         Session[]

  // Blog relations
  blogs            Blog[]          // Blogs authored by user
  comments         Comment[]       // Comments made by user
  blogLikes        BlogLike[]      // Blogs liked by user
}

// ----------------------
// Account Model (NextAuth)
// ----------------------
model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// ----------------------
// Session Model (NextAuth)
// ----------------------
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ----------------------
// Verification Token (Email Auth)
// ----------------------
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ----------------------
// Blog Model
// ----------------------
model Blog {
  id        String      @id @default(cuid())
  title     String
  content   String      // Can be markdown or rich text
  author    User        @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  comments  Comment[]
  likes     BlogLike[]
}

// ----------------------
// Comment Model
// ----------------------
model Comment {
  id        String   @id @default(cuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ----------------------
// Blog Like Model
// ----------------------
model BlogLike {
  id      String   @id @default(cuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  blog    Blog     @relation(fields: [blogId], references: [id])
  blogId  String

  @@unique([userId, blogId]) // Prevent duplicate likes
}

